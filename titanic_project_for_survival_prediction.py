# -*- coding: utf-8 -*-
"""Titanic Project for Survival Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cQ4P4YvN1idQCh6Rff2Rn6qJ1Bptqqte

Importing the Dependencies
"""

#importing the required libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collecting and Processing"""

# load the data from csv file in Pandas DataFrame
titanic_data = pd.read_csv('/train (1).csv')

from google.colab import drive
drive.mount('/content/drive')

# Printing the first five rows of the dataframe
titanic_data.head()

# number of rows and columns
titanic_data.shape

#Getting some information about the data
titanic_data.info()

#check the number of missing values in each column
titanic_data.isnull().sum()

"""Handling the Missing Values"""

# drop the cabin column from the dataframe
titanic_data = titanic_data.drop(columns = 'Cabin',axis=1)

# replacing the missing values in "age" column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(),inplace=True)

# finding the mode value of 'Embarked' column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

# replacing the missing values in Embarked column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

#check the number of missing values in each column
titanic_data.isnull().sum()

"""Data Analysis"""

# getting some statistical measures about the data
titanic_data.describe()

# finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

"""Data Visualisation"""

sns.set()

# making a count plot for "survived" column
sns.countplot("Survived", data= titanic_data)

titanic_data['Sex'].value_counts()

# making a count plot for "Sex" column
sns.countplot("Sex", data= titanic_data)

# number of survivers Gender wise
sns.countplot('Sex',hue='Survived',data=titanic_data)

# making a count plot for "Pclass" column
sns.countplot("Pclass", data= titanic_data)

# number of survivers Pclass wise
sns.countplot('Pclass',hue='Survived',data=titanic_data)

"""Encoding the Categorical Columns"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#converting categorical columns
titanic_data.replace({'Sex':{'male':0,'female':1},'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""Separating features & Target"""

x = titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'], axis=1)
y = titanic_data['Survived']

print(x)

print(y)

"""Splitting the data into training data & Test data"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2,random_state=2)

print(x_train.shape,x_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# Training the Logistic Regression model with Training data
model.fit(x_train,y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy of training data
x_train_prediction = model.predict(x_train)

print(x_train_prediction)

training_data_accuracy = accuracy_score(y_train,x_train_prediction)
print("Accuracy score of the training data :",training_data_accuracy)

# accuracy of test data
x_test_prediction = model.predict(x_test)

print(x_test_prediction)

test_data_accuracy = accuracy_score(y_test,x_test_prediction)
print("Accuracy score of the test data :",test_data_accuracy)

