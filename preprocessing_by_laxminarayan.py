# -*- coding: utf-8 -*-
"""Preprocessing by Laxminarayan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yKuxVqkJuIl9DFnY1eVerrce-4XsvyZ-

###Import the libraries
"""

import pandas as pd
import numpy as np
from numpy import mean
from numpy import std
from sklearn.impute import SimpleImputer

"""###from google.colab import drive

"""

from google.colab import drive
drive.mount('/content/drive')

"""##Read file using the pandas library
## And Print first five rows using head function
"""

# Load the dataset in our colab
#df = pd.read_csv('/content/drive/MyDrive/monster_com-job_sample.csv')
import csv    
data = pd.read_csv('/content/drive/MyDrive/monster_com-job_sample.csv')

data.head()

df=data
pd.set_option('display.max_rows', None)

df=df.drop('date_added',axis=1) #axis

from sklearn.preprocessing import LabelEncoder

le=LabelEncoder()
df['job_type_chng']=le.fit_transform(df['job_type'])

df['job_type_chng']=df['job_type_chng'].replace(39,np.NaN)

df['job_type_chng'].isnull().sum()

from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.impute import KNNImputer

# impu=IterativeImputer()
knn=KNNImputer()
y=np.array(df['job_type_chng']).reshape(-1,1)
x=knn.fit_transform(y)

df1=pd.DataFrame(x)

df1.columns=['values']
df1.isnull().sum()
df['job_type'].isnull().sum()

df['job_type']=df1['values']
df['job_type']=df['job_type'].astype('int')

y=np.array(df['job_type']).reshape(-1,1)
df['job_type']=le.inverse_transform(y)

le=LabelEncoder()
df['organization_chng']=le.fit_transform(df['organization'])

df['organization_chng']=df['organization_chng'].replace(738,np.NaN)

impu=IterativeImputer()
y=np.array(df['organization_chng']).reshape(-1,1)
x=impu.fit_transform(y)

df1=pd.DataFrame(x)

df1

df1.columns=['values']
# df1.isnull().sum()
# df['organization'].isnull().sum()

df['organization']=df1['values']
df['organization']=df['organization'].astype('int')

y=np.array(df['organization']).reshape(-1,1)
df['organization']=le.inverse_transform(y)

le=LabelEncoder()
df['sector_chng']=le.fit_transform(df['sector'])

df['sector_chng']=df['sector_chng'].replace(163,np.NaN)

impu=IterativeImputer()
y=np.array(df['sector_chng']).reshape(-1,1)
x=impu.fit_transform(y)

df1=pd.DataFrame(x)

df1.head()

df1.columns=['values']

df['sector']=df1['values']
df['sector']=df['sector'].astype('int')

y=np.array(df['sector']).reshape(-1,1)
df['sector']=le.inverse_transform(y)

df=df.drop(['job_type_chng','organization_chng','sector_chng'],axis=1)

df['salary']=df['salary'].str.replace("$",'')
df['salary']=df['salary'].str.replace(',','')

a=[]
a=df['salary']
l=len(a)
for i in range (l):
  s=str(df['salary'][i])  
  if '/hour' in s:
    b=s.split('/hour')[0]
    df['salary'][i]=b
  elif '/year' in s:
    c=s.split('/year')[0]
    df['salary'][i]=c

df['salary'].unique()   #for selection

import re
# df['salary']=df['salary'].str.replace('/s','', regex=True)
df['salary']=df['salary'].str.replace('[a-zA-Z]','', regex=True)

v=[]
v=df['salary']
g=len(v)
for i in range (g):
  t=str(df['salary'][i])  
  if '-' or '+' in t:
   
    try:
      mn=t.split('-')[0]
      mx=t.split('-')[1]
      mn=float(mn)
      mx=float(mx)
      df['salary'][i]=(mn+mx)/2
      
    except:
      df['salary'][i]=np.NaN

v=df['salary']
g=len(v)
for i in range (g):
  t=df['salary'][i] 
  if t<100:
    df['salary'][i]=t*8*365

df.head(20)

df['organization']=le.fit_transform(df['organization'])
df['job_type']=le.fit_transform(df['job_type'])
df['sector']=le.fit_transform(df['sector'])

a2=['organization','job_type','sector','salary']
a=df[a2]

a.head(5) #for sample

b=df['salary']
b.head(5)

x=a.dropna(subset=['salary'])
x.head(20)

x=x.drop('salary',axis=1)
x.head()

y=b[~b.isnull()] #tilted #Remove the null values seperated the salary values. 
y.head(5)

c=b[b.isnull()]
c.head(5)

d=a.index.intersection(c.index)

d

d = a.loc[d]
d=d.drop('salary',axis=1)
d.head()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

x_train

from sklearn.linear_model import LinearRegression
lr=LinearRegression()
lr.fit(x_train,y_train)
print(lr.score(x_test,y_test)*100)
lr.predict(d)

from sklearn import svm
regr=svm.SVR()
regr.fit(x_train,y_train)
print(regr.score(x_test,y_test)*100)
regr.predict(d)

from sklearn.neighbors import KNeighborsRegressor
knn=KNeighborsRegressor(n_neighbors=50,weights='distance')
knn.fit(x_train,y_train)
print(knn.score(x_test,y_test)*100)
fill=knn.predict(d)
fill

from sklearn.tree import DecisionTreeRegressor
dtr=DecisionTreeRegressor()
dtr.fit(x_train,y_train)
print(dtr.score(x_test,y_test)*100)
dtr.predict(d)

fill=pd.Series(fill)
print(fill)

v=c
g=len(v)
for i in range (g):
  t=df['salary'][i]
  if pd.isnull(t):
    df['salary'][i]=fill[i]

df['salary'].head()

df.size

